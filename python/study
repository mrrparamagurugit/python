
ord - will give the ascii value of a char
chr - will change the ascii to a char
dir - will show the supported functions for that data type
* we can't have list as a dictionary key. 
* we CAN have tuple as a dictionary key.
* tuple(li)  will change a list to a tuple
* split(some_punctuation_or_whitespace) will have a empty string in the resultant list ('')
 ( print('hi,'.split(','))  will give output as ['hi', ''] )

* An element can only appear only once in a set

* Counters behave like dictionaries in many ways; they map from each key to the number of
times it appears. As in dictionaries, the keys have to be hashable.
Unlike dictionaries, Counters don’t raise an exception if you access an element that doesn’t
appear. Instead, they return 0:

* when accessing a key ( in Right Hand Side of a statement ) which is not present in a dictionary will result in " KeyError "
  ( e.g: dic["one"]=1 ; dic["two"]=2 ; t= dic["oneeeeeeeee"]
  
* we can assign a value to new key in dictionary ( in Left Hand Side of a statement )
  (e.g:  dic = {} ; dic["one"]=1  )
	
* defaultdict(list)  - will create a list as a value for the new key
	e.g: dic defaultdict(<class 'list'>, {})  defaultdict(<class 'list'>, {'onee': [], 'two': 2, 'doo': [], 'one': 1})
  defaultdict(float) - will create a float as a value for the new key 
	e.g: (dic defaultdict(<class 'float'>, {}) 	defaultdict(<class 'float'>, {'one': 1, 'onee': 0.0, 'two': 2}))

* to print mutiple values in a print , use % and pass all arguments as a single tuple.
  ( print("count of %s:%d " %  (sys.argv[2] , value.count(sys.argv[2]))) )

* in C ,  a=b=10 means same value 10 will be assigned to both a and b variables.

  in python a=b= [] means both will be pointing to same list. ( a and b will not be pointing to two different empty lists. both will point to same empty list ).
  e.g: 
	a=b= []
	a.append("hi")
	b.append("hello")
	print(a)
	output is: ['hi', 'hello']

  both append is happening to the same list.


* map ( arg1, agr2)  -   arg1 is a function or a lamba ,  arg2 - is iterable argument ( like list or string )
	map will call arg1 (function or lamba )	by iterating the elements in arg2 ( one by one ) arg2.
	e.g: refer map_to_getall_words_from_a_file.py


* lambda - is a kind of inlinefunction/macro.  It always returns a expression . ( like what we return in a single statement )
	lamba can be placed where a function(def) can't be. 1) as an element in a list. 2) as an argument to a function.

	e.g: as an element is a list
		L = [lambda x: x ** 2,
         	lambda x: x ** 3,
         	lambda x: x ** 4]
	
	Reference: http://www.bogotobogo.com/python/python_functions_lambda.php
